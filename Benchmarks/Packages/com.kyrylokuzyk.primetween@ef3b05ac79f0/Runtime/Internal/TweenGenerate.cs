// This file is generated by CodeGenerator.cs
// ReSharper disable PossibleNullReferenceException
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local
// ReSharper disable UnusedMethodReturnValue.Global
using System;
using System.Collections.Generic;
using JetBrains.Annotations;
using UnityEngine;

namespace PrimeTween {
    public enum TweenType {
        None,
        [HideInInspector]
        MainSequence,
        [HideInInspector]
        NestedSequence,

        [HideInInspector]
        Delay,
        [HideInInspector]
        Callback,

        ShakeLocalPosition,
        ShakeLocalRotation,
        ShakeScale,
        [HideInInspector]
        ShakeCustom,

        [HideInInspector]
        CustomFloat,
        [HideInInspector]
        CustomColor,
        [HideInInspector]
        CustomVector2,
        [HideInInspector]
        CustomVector3,
        [HideInInspector]
        CustomVector4,
        [HideInInspector]
        CustomQuaternion,
        [HideInInspector]
        CustomRect,
        [HideInInspector]
        CustomDouble,

        [HideInInspector]
        MaterialColorProperty,
        [HideInInspector]
        MaterialProperty,
        [HideInInspector]
        MaterialAlphaProperty,
        [HideInInspector]
        MaterialTextureOffset,
        [HideInInspector]
        MaterialTextureScale,
        [HideInInspector]
        MaterialPropertyVector4,

        [HideInInspector]
        GlobalTimeScale,
            
        EulerAngles,
        LocalEulerAngles,

        // CODE GENERATOR BEGIN
        LightIntensity,
        LightColor,
        CameraOrthographicSize,
        CameraFieldOfView,
        LocalRotation,
        Rotation,
        Position,
        PositionX,
        PositionY,
        PositionZ,
        LocalPosition,
        LocalPositionX,
        LocalPositionY,
        LocalPositionZ,
        RotationQuaternion,
        LocalRotationQuaternion,
        Scale,
        ScaleX,
        ScaleY,
        ScaleZ,
        Color,
        Alpha,
        UIPivotX,
        UIPivotY,
        UIPivot,
        UIAnchorMax,
        UIAnchorMin,
        UIAnchoredPosition3D,
        UIAnchoredPosition3DX,
        UIAnchoredPosition3DY,
        UIAnchoredPosition3DZ,
        UIAnchoredPosition,
        UIAnchoredPositionX,
        UIAnchoredPositionY,
        UISizeDelta,
        UIOffsetMin,
        UIOffsetMinX,
        UIOffsetMinY,
        UIOffsetMax,
        UIOffsetMaxX,
        UIOffsetMaxY,
        UIAlphaCanvasGroup,
        MaterialColor,
        MaterialAlpha,
        MaterialMainTextureOffset,
        MaterialMainTextureScale,
        AudioVolume,
    }

    public partial struct Tween {

        public static Tween LightIntensity([NotNull] UnityEngine.Light target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Light;
                var val = _tween.FloatVal;
                _target.intensity = val;
            }, t => (t.target as UnityEngine.Light).intensity.ToContainer(), TweenType.LightIntensity);
        }


        public static Tween LightColor([NotNull] UnityEngine.Light target, TweenSettings<UnityEngine.Color> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Light;
                var val = _tween.ColorVal;
                _target.color = val;
            }, t => (t.target as UnityEngine.Light).color.ToContainer(), TweenType.LightColor);
        }


        public static Tween CameraOrthographicSize([NotNull] UnityEngine.Camera target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Camera;
                var val = _tween.FloatVal;
                _target.orthographicSize = val;
            }, t => (t.target as UnityEngine.Camera).orthographicSize.ToContainer(), TweenType.CameraOrthographicSize);
        }


        public static Tween CameraFieldOfView([NotNull] UnityEngine.Camera target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Camera;
                var val = _tween.FloatVal;
                _target.fieldOfView = val;
            }, t => (t.target as UnityEngine.Camera).fieldOfView.ToContainer(), TweenType.CameraFieldOfView);
        }






        public static Tween Position([NotNull] UnityEngine.Transform target, TweenSettings<UnityEngine.Vector3> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.Vector3Val;
                _target.position = val;
            }, t => (t.target as UnityEngine.Transform).position.ToContainer(), TweenType.Position);
        }


        public static Tween PositionX([NotNull] UnityEngine.Transform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.FloatVal;
                _target.position = _target.position.WithComponent(0, val);
            }, t => (t.target as UnityEngine.Transform).position.x.ToContainer(), TweenType.PositionX);
        }


        public static Tween PositionY([NotNull] UnityEngine.Transform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.FloatVal;
                _target.position = _target.position.WithComponent(1, val);
            }, t => (t.target as UnityEngine.Transform).position.y.ToContainer(), TweenType.PositionY);
        }


        public static Tween PositionZ([NotNull] UnityEngine.Transform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.FloatVal;
                _target.position = _target.position.WithComponent(2, val);
            }, t => (t.target as UnityEngine.Transform).position.z.ToContainer(), TweenType.PositionZ);
        }


        public static Tween LocalPosition([NotNull] UnityEngine.Transform target, TweenSettings<UnityEngine.Vector3> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.Vector3Val;
                _target.localPosition = val;
            }, t => (t.target as UnityEngine.Transform).localPosition.ToContainer(), TweenType.LocalPosition);
        }


        public static Tween LocalPositionX([NotNull] UnityEngine.Transform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.FloatVal;
                _target.localPosition = _target.localPosition.WithComponent(0, val);
            }, t => (t.target as UnityEngine.Transform).localPosition.x.ToContainer(), TweenType.LocalPositionX);
        }


        public static Tween LocalPositionY([NotNull] UnityEngine.Transform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.FloatVal;
                _target.localPosition = _target.localPosition.WithComponent(1, val);
            }, t => (t.target as UnityEngine.Transform).localPosition.y.ToContainer(), TweenType.LocalPositionY);
        }


        public static Tween LocalPositionZ([NotNull] UnityEngine.Transform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.FloatVal;
                _target.localPosition = _target.localPosition.WithComponent(2, val);
            }, t => (t.target as UnityEngine.Transform).localPosition.z.ToContainer(), TweenType.LocalPositionZ);
        }


        public static Tween Rotation([NotNull] UnityEngine.Transform target, TweenSettings<UnityEngine.Quaternion> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.QuaternionVal;
                _target.rotation = val;
            }, t => (t.target as UnityEngine.Transform).rotation.ToContainer(), TweenType.RotationQuaternion);
        }


        public static Tween LocalRotation([NotNull] UnityEngine.Transform target, TweenSettings<UnityEngine.Quaternion> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.QuaternionVal;
                _target.localRotation = val;
            }, t => (t.target as UnityEngine.Transform).localRotation.ToContainer(), TweenType.LocalRotationQuaternion);
        }


        public static Tween Scale([NotNull] UnityEngine.Transform target, TweenSettings<UnityEngine.Vector3> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.Vector3Val;
                _target.localScale = val;
            }, t => (t.target as UnityEngine.Transform).localScale.ToContainer(), TweenType.Scale);
        }


        public static Tween ScaleX([NotNull] UnityEngine.Transform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.FloatVal;
                _target.localScale = _target.localScale.WithComponent(0, val);
            }, t => (t.target as UnityEngine.Transform).localScale.x.ToContainer(), TweenType.ScaleX);
        }


        public static Tween ScaleY([NotNull] UnityEngine.Transform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.FloatVal;
                _target.localScale = _target.localScale.WithComponent(1, val);
            }, t => (t.target as UnityEngine.Transform).localScale.y.ToContainer(), TweenType.ScaleY);
        }


        public static Tween ScaleZ([NotNull] UnityEngine.Transform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Transform;
                var val = _tween.FloatVal;
                _target.localScale = _target.localScale.WithComponent(2, val);
            }, t => (t.target as UnityEngine.Transform).localScale.z.ToContainer(), TweenType.ScaleZ);
        }


        public static Tween Color([NotNull] UnityEngine.SpriteRenderer target, TweenSettings<UnityEngine.Color> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.SpriteRenderer;
                var val = _tween.ColorVal;
                _target.color = val;
            }, t => (t.target as UnityEngine.SpriteRenderer).color.ToContainer(), TweenType.Color);
        }


        public static Tween Alpha([NotNull] UnityEngine.SpriteRenderer target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.SpriteRenderer;
                var val = _tween.FloatVal;
                _target.color = _target.color.WithAlpha(val);
            }, t => (t.target as UnityEngine.SpriteRenderer).color.a.ToContainer(), TweenType.Alpha);
        }

        #if !UNITY_2019_1_OR_NEWER || UNITY_UGUI_INSTALLED

        public static Tween UIPivotX([NotNull] UnityEngine.RectTransform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.FloatVal;
                _target.pivot = _target.pivot.WithComponent(0, val);
            }, t => (t.target as UnityEngine.RectTransform).pivot[0].ToContainer(), TweenType.UIPivotX);
        }


        public static Tween UIPivotY([NotNull] UnityEngine.RectTransform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.FloatVal;
                _target.pivot = _target.pivot.WithComponent(1, val);
            }, t => (t.target as UnityEngine.RectTransform).pivot[1].ToContainer(), TweenType.UIPivotY);
        }


        public static Tween UIPivot([NotNull] UnityEngine.RectTransform target, TweenSettings<UnityEngine.Vector2> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.Vector2Val;
                _target.pivot = val;
            }, t => (t.target as UnityEngine.RectTransform).pivot.ToContainer(), TweenType.UIPivot);
        }


        public static Tween UIAnchorMax([NotNull] UnityEngine.RectTransform target, TweenSettings<UnityEngine.Vector2> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.Vector2Val;
                _target.anchorMax = val;
            }, t => (t.target as UnityEngine.RectTransform).anchorMax.ToContainer(), TweenType.UIAnchorMax);
        }


        public static Tween UIAnchorMin([NotNull] UnityEngine.RectTransform target, TweenSettings<UnityEngine.Vector2> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.Vector2Val;
                _target.anchorMin = val;
            }, t => (t.target as UnityEngine.RectTransform).anchorMin.ToContainer(), TweenType.UIAnchorMin);
        }


        public static Tween UIAnchoredPosition3D([NotNull] UnityEngine.RectTransform target, TweenSettings<UnityEngine.Vector3> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.Vector3Val;
                _target.anchoredPosition3D = val;
            }, t => (t.target as UnityEngine.RectTransform).anchoredPosition3D.ToContainer(), TweenType.UIAnchoredPosition3D);
        }


        public static Tween UIAnchoredPosition3DX([NotNull] UnityEngine.RectTransform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.FloatVal;
                _target.anchoredPosition3D = _target.anchoredPosition3D.WithComponent(0, val);
            }, t => (t.target as UnityEngine.RectTransform).anchoredPosition3D[0].ToContainer(), TweenType.UIAnchoredPosition3DX);
        }


        public static Tween UIAnchoredPosition3DY([NotNull] UnityEngine.RectTransform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.FloatVal;
                _target.anchoredPosition3D = _target.anchoredPosition3D.WithComponent(1, val);
            }, t => (t.target as UnityEngine.RectTransform).anchoredPosition3D[1].ToContainer(), TweenType.UIAnchoredPosition3DY);
        }


        public static Tween UIAnchoredPosition3DZ([NotNull] UnityEngine.RectTransform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.FloatVal;
                _target.anchoredPosition3D = _target.anchoredPosition3D.WithComponent(2, val);
            }, t => (t.target as UnityEngine.RectTransform).anchoredPosition3D[2].ToContainer(), TweenType.UIAnchoredPosition3DZ);
        }


        public static Tween UIAnchoredPosition([NotNull] UnityEngine.RectTransform target, TweenSettings<UnityEngine.Vector2> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.Vector2Val;
                _target.anchoredPosition = val;
            }, t => (t.target as UnityEngine.RectTransform).anchoredPosition.ToContainer(), TweenType.UIAnchoredPosition);
        }


        public static Tween UIAnchoredPositionX([NotNull] UnityEngine.RectTransform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.FloatVal;
                _target.anchoredPosition = _target.anchoredPosition.WithComponent(0, val);
            }, t => (t.target as UnityEngine.RectTransform).anchoredPosition.x.ToContainer(), TweenType.UIAnchoredPositionX);
        }


        public static Tween UIAnchoredPositionY([NotNull] UnityEngine.RectTransform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.FloatVal;
                _target.anchoredPosition = _target.anchoredPosition.WithComponent(1, val);
            }, t => (t.target as UnityEngine.RectTransform).anchoredPosition.y.ToContainer(), TweenType.UIAnchoredPositionY);
        }


        public static Tween UISizeDelta([NotNull] UnityEngine.RectTransform target, TweenSettings<UnityEngine.Vector2> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.Vector2Val;
                _target.sizeDelta = val;
            }, t => (t.target as UnityEngine.RectTransform).sizeDelta.ToContainer(), TweenType.UISizeDelta);
        }


        public static Tween UIOffsetMin([NotNull] UnityEngine.RectTransform target, TweenSettings<UnityEngine.Vector2> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.Vector2Val;
                _target.offsetMin = val;
            }, t => (t.target as UnityEngine.RectTransform).offsetMin.ToContainer(), TweenType.UIOffsetMin);
        }


        public static Tween UIOffsetMinX([NotNull] UnityEngine.RectTransform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.FloatVal;
                _target.offsetMin = _target.offsetMin.WithComponent(0, val);
            }, t => (t.target as UnityEngine.RectTransform).offsetMin[0].ToContainer(), TweenType.UIOffsetMinX);
        }


        public static Tween UIOffsetMinY([NotNull] UnityEngine.RectTransform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.FloatVal;
                _target.offsetMin = _target.offsetMin.WithComponent(1, val);
            }, t => (t.target as UnityEngine.RectTransform).offsetMin[1].ToContainer(), TweenType.UIOffsetMinY);
        }


        public static Tween UIOffsetMax([NotNull] UnityEngine.RectTransform target, TweenSettings<UnityEngine.Vector2> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.Vector2Val;
                _target.offsetMax = val;
            }, t => (t.target as UnityEngine.RectTransform).offsetMax.ToContainer(), TweenType.UIOffsetMax);
        }


        public static Tween UIOffsetMaxX([NotNull] UnityEngine.RectTransform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.FloatVal;
                _target.offsetMax = _target.offsetMax.WithComponent(0, val);
            }, t => (t.target as UnityEngine.RectTransform).offsetMax[0].ToContainer(), TweenType.UIOffsetMaxX);
        }


        public static Tween UIOffsetMaxY([NotNull] UnityEngine.RectTransform target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.RectTransform;
                var val = _tween.FloatVal;
                _target.offsetMax = _target.offsetMax.WithComponent(1, val);
            }, t => (t.target as UnityEngine.RectTransform).offsetMax[1].ToContainer(), TweenType.UIOffsetMaxY);
        }


        public static Tween UIAlpha([NotNull] UnityEngine.CanvasGroup target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.CanvasGroup;
                var val = _tween.FloatVal;
                _target.alpha = val;
            }, t => (t.target as UnityEngine.CanvasGroup).alpha.ToContainer(), TweenType.UIAlphaCanvasGroup);
        }

        #endif

        public static Tween MaterialColor([NotNull] UnityEngine.Material target, TweenSettings<UnityEngine.Color> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Material;
                var val = _tween.ColorVal;
                _target.color = val;
            }, t => (t.target as UnityEngine.Material).color.ToContainer(), TweenType.MaterialColor);
        }


        public static Tween MaterialAlpha([NotNull] UnityEngine.Material target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Material;
                var val = _tween.FloatVal;
                _target.color = _target.color.WithAlpha(val);
            }, t => (t.target as UnityEngine.Material).color.a.ToContainer(), TweenType.MaterialAlpha);
        }


        public static Tween MaterialMainTextureOffset([NotNull] UnityEngine.Material target, TweenSettings<UnityEngine.Vector2> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Material;
                var val = _tween.Vector2Val;
                _target.mainTextureOffset = val;
            }, t => (t.target as UnityEngine.Material).mainTextureOffset.ToContainer(), TweenType.MaterialMainTextureOffset);
        }


        public static Tween MaterialMainTextureScale([NotNull] UnityEngine.Material target, TweenSettings<UnityEngine.Vector2> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.Material;
                var val = _tween.Vector2Val;
                _target.mainTextureScale = val;
            }, t => (t.target as UnityEngine.Material).mainTextureScale.ToContainer(), TweenType.MaterialMainTextureScale);
        }

        #if !UNITY_2019_1_OR_NEWER || AUDIO_MODULE_INSTALLED

        public static Tween AudioVolume([NotNull] UnityEngine.AudioSource target, TweenSettings<float> settings) {
            return animate(target, ref settings, _tween => {
                var _target = _tween.target as UnityEngine.AudioSource;
                var val = _tween.FloatVal;
                _target.volume = val;
            }, t => (t.target as UnityEngine.AudioSource).volume.ToContainer(), TweenType.AudioVolume);
        }

        #endif

public static Tween Custom(TweenSettings<float> settings, [NotNull] Action<float> onValueChange) {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Float);
            tween.customOnValueChange = onValueChange;
            tween.Setup(PrimeTweenManager.dummyTarget, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<float>;
                var val = _tween.FloatVal;
                try {
                    _onValueChange(val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomFloat);
            return PrimeTweenManager.Animate(tween);
        }
        public static Tween Custom<T>([NotNull] T target, TweenSettings<float> settings, [NotNull] Action<T, float> onValueChange) where T : class 
            => Custom_internal(target, settings, onValueChange);
        static Tween Custom_internal<T>([NotNull] T target, TweenSettings<float> settings, [NotNull] Action<T, float> onValueChange, bool isAdditive = false) where T : class {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Float);
            tween.customOnValueChange = onValueChange;
            tween.isAdditive = isAdditive;
            tween.Setup(target, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<T, float>;
                var _target = _tween.target as T;
                float val;
                if (_tween.isAdditive) {
                    var newVal = _tween.FloatVal;
                    val = newVal.calcDelta(_tween.prevVal);
                    _tween.prevVal.FloatVal = newVal;
                } else {
                    val = _tween.FloatVal;
                }
                try {
                    _onValueChange(_target, val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomFloat);
            return PrimeTweenManager.Animate(tween);
        }
   

public static Tween Custom(TweenSettings<UnityEngine.Color> settings, [NotNull] Action<UnityEngine.Color> onValueChange) {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Color);
            tween.customOnValueChange = onValueChange;
            tween.Setup(PrimeTweenManager.dummyTarget, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<UnityEngine.Color>;
                var val = _tween.ColorVal;
                try {
                    _onValueChange(val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomColor);
            return PrimeTweenManager.Animate(tween);
        }
        public static Tween Custom<T>([NotNull] T target, TweenSettings<UnityEngine.Color> settings, [NotNull] Action<T, UnityEngine.Color> onValueChange) where T : class 
            => Custom_internal(target, settings, onValueChange);
        static Tween Custom_internal<T>([NotNull] T target, TweenSettings<UnityEngine.Color> settings, [NotNull] Action<T, UnityEngine.Color> onValueChange, bool isAdditive = false) where T : class {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Color);
            tween.customOnValueChange = onValueChange;
            tween.isAdditive = isAdditive;
            tween.Setup(target, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<T, UnityEngine.Color>;
                var _target = _tween.target as T;
                UnityEngine.Color val;
                if (_tween.isAdditive) {
                    var newVal = _tween.ColorVal;
                    val = newVal.calcDelta(_tween.prevVal);
                    _tween.prevVal.ColorVal = newVal;
                } else {
                    val = _tween.ColorVal;
                }
                try {
                    _onValueChange(_target, val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomColor);
            return PrimeTweenManager.Animate(tween);
        }
   

public static Tween Custom(TweenSettings<UnityEngine.Vector2> settings, [NotNull] Action<UnityEngine.Vector2> onValueChange) {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Vector2);
            tween.customOnValueChange = onValueChange;
            tween.Setup(PrimeTweenManager.dummyTarget, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<UnityEngine.Vector2>;
                var val = _tween.Vector2Val;
                try {
                    _onValueChange(val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomVector2);
            return PrimeTweenManager.Animate(tween);
        }
        public static Tween Custom<T>([NotNull] T target, TweenSettings<UnityEngine.Vector2> settings, [NotNull] Action<T, UnityEngine.Vector2> onValueChange) where T : class 
            => Custom_internal(target, settings, onValueChange);
        static Tween Custom_internal<T>([NotNull] T target, TweenSettings<UnityEngine.Vector2> settings, [NotNull] Action<T, UnityEngine.Vector2> onValueChange, bool isAdditive = false) where T : class {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Vector2);
            tween.customOnValueChange = onValueChange;
            tween.isAdditive = isAdditive;
            tween.Setup(target, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<T, UnityEngine.Vector2>;
                var _target = _tween.target as T;
                UnityEngine.Vector2 val;
                if (_tween.isAdditive) {
                    var newVal = _tween.Vector2Val;
                    val = newVal.calcDelta(_tween.prevVal);
                    _tween.prevVal.Vector2Val = newVal;
                } else {
                    val = _tween.Vector2Val;
                }
                try {
                    _onValueChange(_target, val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomVector2);
            return PrimeTweenManager.Animate(tween);
        }
   

public static Tween Custom(TweenSettings<UnityEngine.Vector3> settings, [NotNull] Action<UnityEngine.Vector3> onValueChange) {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Vector3);
            tween.customOnValueChange = onValueChange;
            tween.Setup(PrimeTweenManager.dummyTarget, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<UnityEngine.Vector3>;
                var val = _tween.Vector3Val;
                try {
                    _onValueChange(val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomVector3);
            return PrimeTweenManager.Animate(tween);
        }
        public static Tween Custom<T>([NotNull] T target, TweenSettings<UnityEngine.Vector3> settings, [NotNull] Action<T, UnityEngine.Vector3> onValueChange) where T : class 
            => Custom_internal(target, settings, onValueChange);
        static Tween Custom_internal<T>([NotNull] T target, TweenSettings<UnityEngine.Vector3> settings, [NotNull] Action<T, UnityEngine.Vector3> onValueChange, bool isAdditive = false) where T : class {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Vector3);
            tween.customOnValueChange = onValueChange;
            tween.isAdditive = isAdditive;
            tween.Setup(target, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<T, UnityEngine.Vector3>;
                var _target = _tween.target as T;
                UnityEngine.Vector3 val;
                if (_tween.isAdditive) {
                    var newVal = _tween.Vector3Val;
                    val = newVal.calcDelta(_tween.prevVal);
                    _tween.prevVal.Vector3Val = newVal;
                } else {
                    val = _tween.Vector3Val;
                }
                try {
                    _onValueChange(_target, val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomVector3);
            return PrimeTweenManager.Animate(tween);
        }
   

public static Tween Custom(TweenSettings<UnityEngine.Vector4> settings, [NotNull] Action<UnityEngine.Vector4> onValueChange) {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Vector4);
            tween.customOnValueChange = onValueChange;
            tween.Setup(PrimeTweenManager.dummyTarget, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<UnityEngine.Vector4>;
                var val = _tween.Vector4Val;
                try {
                    _onValueChange(val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomVector4);
            return PrimeTweenManager.Animate(tween);
        }
        public static Tween Custom<T>([NotNull] T target, TweenSettings<UnityEngine.Vector4> settings, [NotNull] Action<T, UnityEngine.Vector4> onValueChange) where T : class 
            => Custom_internal(target, settings, onValueChange);
        static Tween Custom_internal<T>([NotNull] T target, TweenSettings<UnityEngine.Vector4> settings, [NotNull] Action<T, UnityEngine.Vector4> onValueChange, bool isAdditive = false) where T : class {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Vector4);
            tween.customOnValueChange = onValueChange;
            tween.isAdditive = isAdditive;
            tween.Setup(target, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<T, UnityEngine.Vector4>;
                var _target = _tween.target as T;
                UnityEngine.Vector4 val;
                if (_tween.isAdditive) {
                    var newVal = _tween.Vector4Val;
                    val = newVal.calcDelta(_tween.prevVal);
                    _tween.prevVal.Vector4Val = newVal;
                } else {
                    val = _tween.Vector4Val;
                }
                try {
                    _onValueChange(_target, val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomVector4);
            return PrimeTweenManager.Animate(tween);
        }
   

public static Tween Custom(TweenSettings<UnityEngine.Quaternion> settings, [NotNull] Action<UnityEngine.Quaternion> onValueChange) {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Quaternion);
            tween.customOnValueChange = onValueChange;
            tween.Setup(PrimeTweenManager.dummyTarget, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<UnityEngine.Quaternion>;
                var val = _tween.QuaternionVal;
                try {
                    _onValueChange(val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomQuaternion);
            return PrimeTweenManager.Animate(tween);
        }
        public static Tween Custom<T>([NotNull] T target, TweenSettings<UnityEngine.Quaternion> settings, [NotNull] Action<T, UnityEngine.Quaternion> onValueChange) where T : class 
            => Custom_internal(target, settings, onValueChange);
        static Tween Custom_internal<T>([NotNull] T target, TweenSettings<UnityEngine.Quaternion> settings, [NotNull] Action<T, UnityEngine.Quaternion> onValueChange, bool isAdditive = false) where T : class {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Quaternion);
            tween.customOnValueChange = onValueChange;
            tween.isAdditive = isAdditive;
            tween.Setup(target, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<T, UnityEngine.Quaternion>;
                var _target = _tween.target as T;
                UnityEngine.Quaternion val;
                if (_tween.isAdditive) {
                    var newVal = _tween.QuaternionVal;
                    val = newVal.calcDelta(_tween.prevVal);
                    _tween.prevVal.QuaternionVal = newVal;
                } else {
                    val = _tween.QuaternionVal;
                }
                try {
                    _onValueChange(_target, val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomQuaternion);
            return PrimeTweenManager.Animate(tween);
        }
   

public static Tween Custom(TweenSettings<UnityEngine.Rect> settings, [NotNull] Action<UnityEngine.Rect> onValueChange) {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Rect);
            tween.customOnValueChange = onValueChange;
            tween.Setup(PrimeTweenManager.dummyTarget, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<UnityEngine.Rect>;
                var val = _tween.RectVal;
                try {
                    _onValueChange(val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomRect);
            return PrimeTweenManager.Animate(tween);
        }
        public static Tween Custom<T>([NotNull] T target, TweenSettings<UnityEngine.Rect> settings, [NotNull] Action<T, UnityEngine.Rect> onValueChange) where T : class 
            => Custom_internal(target, settings, onValueChange);
        static Tween Custom_internal<T>([NotNull] T target, TweenSettings<UnityEngine.Rect> settings, [NotNull] Action<T, UnityEngine.Rect> onValueChange, bool isAdditive = false) where T : class {
            Assert.IsNotNull(onValueChange);
            if (settings.startFromCurrent) {
                UnityEngine.Debug.LogWarning(Constants.customTweensDontSupportStartFromCurrentWarning);
            }
            var tween = PrimeTweenManager.fetchTween();
            tween.startValue.CopyFrom(ref settings.startValue);
            tween.endValue.CopyFrom(ref settings.endValue);
            tween.setPropType(PropType.Rect);
            tween.customOnValueChange = onValueChange;
            tween.isAdditive = isAdditive;
            tween.Setup(target, ref settings.settings, _tween => {
                var _onValueChange = _tween.customOnValueChange as Action<T, UnityEngine.Rect>;
                var _target = _tween.target as T;
                UnityEngine.Rect val;
                if (_tween.isAdditive) {
                    var newVal = _tween.RectVal;
                    val = newVal.calcDelta(_tween.prevVal);
                    _tween.prevVal.RectVal = newVal;
                } else {
                    val = _tween.RectVal;
                }
                try {
                    _onValueChange(_target, val);
                } catch (Exception e) {
                    Assert.LogError($"Tween was stopped because of exception in {nameof(onValueChange)} callback, tween: {_tween.GetDescription()}, exception:\n{e}\n", _tween.id, _tween.target as UnityEngine.Object);
                    _tween.EmergencyStop();
                }
            }, null, false, TweenType.CustomRect);
            return PrimeTweenManager.Animate(tween);
        }
   
    }
}