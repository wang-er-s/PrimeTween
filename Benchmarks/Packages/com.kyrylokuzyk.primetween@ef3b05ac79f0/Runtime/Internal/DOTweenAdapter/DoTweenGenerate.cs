
// This file is generated by CodeGenerator.cs
using JetBrains.Annotations;
using System;

#if DOTWEEN_ADAPTER
namespace PrimeTween {
    [PublicAPI]
    public static partial class DOTweenAdapter {
        public static Tween DOIntensity([NotNull] this UnityEngine.Light target, Single endValue, float duration) => Tween.LightIntensity(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOColor([NotNull] this UnityEngine.Light target, UnityEngine.Color endValue, float duration) => Tween.LightColor(target, new TweenSettings<UnityEngine.Color>(endValue: endValue, duration: duration));

        public static Tween DOOrthoSize([NotNull] this UnityEngine.Camera target, Single endValue, float duration) => Tween.CameraOrthographicSize(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOFieldOfView([NotNull] this UnityEngine.Camera target, Single endValue, float duration) => Tween.CameraFieldOfView(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOMove([NotNull] this UnityEngine.Transform target, UnityEngine.Vector3 endValue, float duration) => Tween.Position(target, new TweenSettings<UnityEngine.Vector3>(endValue: endValue, duration: duration));

        public static Tween DOMoveX([NotNull] this UnityEngine.Transform target, Single endValue, float duration) => Tween.PositionX(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOMoveY([NotNull] this UnityEngine.Transform target, Single endValue, float duration) => Tween.PositionY(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOMoveZ([NotNull] this UnityEngine.Transform target, Single endValue, float duration) => Tween.PositionZ(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOLocalMove([NotNull] this UnityEngine.Transform target, UnityEngine.Vector3 endValue, float duration) => Tween.LocalPosition(target, new TweenSettings<UnityEngine.Vector3>(endValue: endValue, duration: duration));

        public static Tween DOLocalMoveX([NotNull] this UnityEngine.Transform target, Single endValue, float duration) => Tween.LocalPositionX(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOLocalMoveY([NotNull] this UnityEngine.Transform target, Single endValue, float duration) => Tween.LocalPositionY(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOLocalMoveZ([NotNull] this UnityEngine.Transform target, Single endValue, float duration) => Tween.LocalPositionZ(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DORotateQuaternion([NotNull] this UnityEngine.Transform target, UnityEngine.Quaternion endValue, float duration) => Tween.Rotation(target, new TweenSettings<UnityEngine.Quaternion>(endValue: endValue, duration: duration));

        public static Tween DOLocalRotateQuaternion([NotNull] this UnityEngine.Transform target, UnityEngine.Quaternion endValue, float duration) => Tween.LocalRotation(target, new TweenSettings<UnityEngine.Quaternion>(endValue: endValue, duration: duration));

        public static Tween DOScale([NotNull] this UnityEngine.Transform target, UnityEngine.Vector3 endValue, float duration) => Tween.Scale(target, new TweenSettings<UnityEngine.Vector3>(endValue: endValue, duration: duration));

        public static Tween DOScaleX([NotNull] this UnityEngine.Transform target, Single endValue, float duration) => Tween.ScaleX(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOScaleY([NotNull] this UnityEngine.Transform target, Single endValue, float duration) => Tween.ScaleY(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOScaleZ([NotNull] this UnityEngine.Transform target, Single endValue, float duration) => Tween.ScaleZ(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOColor([NotNull] this UnityEngine.SpriteRenderer target, UnityEngine.Color endValue, float duration) => Tween.Color(target, new TweenSettings<UnityEngine.Color>(endValue: endValue, duration: duration));

        public static Tween DOFade([NotNull] this UnityEngine.SpriteRenderer target, Single endValue, float duration) => Tween.Alpha(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        #if !UNITY_2019_1_OR_NEWER || UNITY_UGUI_INSTALLED
        public static Tween DOPivotX([NotNull] this UnityEngine.RectTransform target, Single endValue, float duration) => Tween.UIPivotX(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOPivotY([NotNull] this UnityEngine.RectTransform target, Single endValue, float duration) => Tween.UIPivotY(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOPivot([NotNull] this UnityEngine.RectTransform target, UnityEngine.Vector2 endValue, float duration) => Tween.UIPivot(target, new TweenSettings<UnityEngine.Vector2>(endValue: endValue, duration: duration));

        public static Tween DOAnchorMax([NotNull] this UnityEngine.RectTransform target, UnityEngine.Vector2 endValue, float duration) => Tween.UIAnchorMax(target, new TweenSettings<UnityEngine.Vector2>(endValue: endValue, duration: duration));

        public static Tween DOAnchorMin([NotNull] this UnityEngine.RectTransform target, UnityEngine.Vector2 endValue, float duration) => Tween.UIAnchorMin(target, new TweenSettings<UnityEngine.Vector2>(endValue: endValue, duration: duration));

        public static Tween DOAnchorPos3D([NotNull] this UnityEngine.RectTransform target, UnityEngine.Vector3 endValue, float duration) => Tween.UIAnchoredPosition3D(target, new TweenSettings<UnityEngine.Vector3>(endValue: endValue, duration: duration));

        public static Tween DOAnchorPos3DX([NotNull] this UnityEngine.RectTransform target, Single endValue, float duration) => Tween.UIAnchoredPosition3DX(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOAnchorPos3DY([NotNull] this UnityEngine.RectTransform target, Single endValue, float duration) => Tween.UIAnchoredPosition3DY(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOAnchorPos3DZ([NotNull] this UnityEngine.RectTransform target, Single endValue, float duration) => Tween.UIAnchoredPosition3DZ(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOAnchorPos([NotNull] this UnityEngine.RectTransform target, UnityEngine.Vector2 endValue, float duration) => Tween.UIAnchoredPosition(target, new TweenSettings<UnityEngine.Vector2>(endValue: endValue, duration: duration));

        public static Tween DOAnchorPosX([NotNull] this UnityEngine.RectTransform target, Single endValue, float duration) => Tween.UIAnchoredPositionX(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOAnchorPosY([NotNull] this UnityEngine.RectTransform target, Single endValue, float duration) => Tween.UIAnchoredPositionY(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOSizeDelta([NotNull] this UnityEngine.RectTransform target, UnityEngine.Vector2 endValue, float duration) => Tween.UISizeDelta(target, new TweenSettings<UnityEngine.Vector2>(endValue: endValue, duration: duration));

        public static Tween DOFade([NotNull] this UnityEngine.CanvasGroup target, Single endValue, float duration) => Tween.UIAlpha(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        #endif
        public static Tween DOColor([NotNull] this UnityEngine.Material target, UnityEngine.Color endValue, float duration) => Tween.MaterialColor(target, new TweenSettings<UnityEngine.Color>(endValue: endValue, duration: duration));

        public static Tween DOFade([NotNull] this UnityEngine.Material target, Single endValue, float duration) => Tween.MaterialAlpha(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        public static Tween DOOffset([NotNull] this UnityEngine.Material target, UnityEngine.Vector2 endValue, float duration) => Tween.MaterialMainTextureOffset(target, new TweenSettings<UnityEngine.Vector2>(endValue: endValue, duration: duration));

        public static Tween DOTiling([NotNull] this UnityEngine.Material target, UnityEngine.Vector2 endValue, float duration) => Tween.MaterialMainTextureScale(target, new TweenSettings<UnityEngine.Vector2>(endValue: endValue, duration: duration));

        #if !UNITY_2019_1_OR_NEWER || AUDIO_MODULE_INSTALLED
        public static Tween DOFade([NotNull] this UnityEngine.AudioSource target, Single endValue, float duration) => Tween.AudioVolume(target, new TweenSettings<float>(endValue: endValue, duration: duration));

        #endif
    }
}
#endif